

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.xml.bind.JAXBException;
import javax.xml.stream.XMLStreamException;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;

/**
 *
 * @author lovse
 */
public class Lab_3Form extends javax.swing.JFrame {

    /**
     * Creates new form Lab_3Form
     */
    public Lab_3Form() {
        initComponents();
    }

//        jTree1.setModel(new DefaultTreeModel(main));



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Read from markup");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    choose_fileActionPerformed(evt);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                } catch (XMLStreamException e) {
                    throw new RuntimeException(e);
                } catch (JAXBException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        jButton2.setText("creat database");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    create_databaseActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        jButton3.setText("delete database");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    delete_databaseActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        jButton4.setText("compute");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    computeActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void choose_fileActionPerformed(java.awt.event.ActionEvent evt) throws IOException, XMLStreamException, JAXBException {//GEN-FIRST:event_jButton1ActionPerformed

        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setCurrentDirectory(new File("."));
        int response = fileChooser.showOpenDialog(null);

        String file = null;
        if(response == JFileChooser.APPROVE_OPTION){
            file = fileChooser.getSelectedFile().getAbsolutePath();
            System.out.println(file);
        }

        // Creating a chain of responsibility out of different readers

        Reader jsonReader = new JSONReader();
        Reader yamlReaer = new YAMLReader();
        Reader xmlReader = new XMLReader();

        jsonReader.setNextReader(yamlReaer);
        yamlReaer.setNextReader(xmlReader);
        xmlReader.setNextReader(null);

        jsonReader.readFile(file);



    }//GEN-LAST:event_jButton1ActionPerformed

    private void create_databaseActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_jButton2ActionPerformed

        // choosing which file to get data from

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("."));
        int response = fileChooser.showOpenDialog(null);

        String file = null;
        if(response == JFileChooser.APPROVE_OPTION){
            file = fileChooser.getSelectedFile().getAbsolutePath();
            System.out.println(file);
        }

        // reading data fro excel
        ExcelProvider reactors = new ExcelProvider();
        ArrayList<SQLTable> tables = reactors.read_data_for_db(file);

        // connecting to a db
        DatabaseConnector db= new DatabaseConnector();
        DatabaseCreateor createor = new DatabaseCreateor();
        Connection conn = db.conncetion("reactors", "postgres", "F_7d3fd73");
        tables.forEach(b->{
            try {
                createor.createTabel(conn,b);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
            try {
                createor.fillTable(conn, b);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });

        createor.addForeingKey("sites", "units","id", "site" , conn);
        createor.addForeingKey("countries","sites", "id", "place", conn);
        createor.addForeingKey("companies", "sites","id","operator", conn);
        createor.addForeingKey("regions", "countries", "id", "region_id", conn);

        conn.close();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void delete_databaseActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_jButton3ActionPerformed

        DatabaseConnector db= new DatabaseConnector();
        Connection conn = db.conncetion("reactors", "postgres", "F_7d3fd73");
        ExcelProvider reactors = new ExcelProvider();
        ArrayList<SQLTable> tables = reactors.read_data_for_db(".\\ReactorData.xlsx");

        Statement stmt = conn.createStatement();
        tables.forEach(b ->{

            String tableName = b.getTableName();
            String sql = "DROP TABLE " + tableName;
            try {
                stmt.executeUpdate(sql);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
            System.out.println("Table " + tableName + " dropped successfully");
        });










        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void computeActionPerformed(java.awt.event.ActionEvent evt) throws SQLException, IOException {//GEN-FIRST:event_jButton4ActionPerformed
        Query_exicutor qe = new Query_exicutor();
        String sql ="select region_name, country_name, companies_name, class,thermal_capacity , enrichment, load_factor, commercial_operation\n" +
                "from regions r \n" +
                "left join countries c on r.id = c.region_id \n" +
                "left join sites s on s.place = c.id \n" +
                "left join units u   on s.id = u.site  \n" +
                "left join companies c2 on u.\"operator\" = c2.id\n" +
                "where (date_shutdown > '2024-01-01' or date_shutdown is null)  and commercial_operation <= '2023-01-01'";


        DatabaseConnector db= new DatabaseConnector();
        Connection conn = db.conncetion("reactors", "postgres", "F_7d3fd73");
        HashMap<String,ArrayList<Object>> active_reactors = qe.getDataFromDB(conn, sql);


        HashMap<String,Double> region = qe.Coumpute(active_reactors,  "region_name");
        qe.Coumpute(active_reactors,  "country_name");
        qe.Coumpute(active_reactors, "companies_name");
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

//        for (String key: regions.keySet()) {
//             tableModel.addRow(new Object[]{key, regions.get(key)});
//        }
        for (String key: region.keySet()) {
            tableModel.addRow(new Object[]{key, region.get(key)});
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Lab_3Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Lab_3Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Lab_3Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lab_3Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Lab_3Form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
